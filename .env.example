# ============================================
# CONFIGURATION OSINTReport - Exemple
# ============================================
# Copiez ce fichier vers .env et modifiez les valeurs selon votre environnement
# IMPORTANT : Ne committez jamais le fichier .env dans Git !

# ============================================
# ENVIRONNEMENT
# ============================================

# Mode d'exécution (development, test, production)
NODE_ENV=development

# Port du serveur backend
PORT=4000

# URLs de l'application
# IMPORTANT : Ces URLs sont utilisées pour :
#   - Les liens dans les emails (réinitialisation de mot de passe, etc.)
#   - Les cookies (CORS)
#   - Les tokens JWT (issuer/audience)
# 
# En environnement local :
#   FRONTEND_URL=http://localhost:5173
#   BACKEND_URL=http://localhost:4000
#
# En production / GitHub Codespaces, utilisez les URLs publiques :
#   FRONTEND_URL=https://votre-domaine.com
#   BACKEND_URL=https://api.votre-domaine.com
#
# Astuce : Exécutez ./scripts/update-env-urls.sh pour détecter automatiquement
FRONTEND_URL=http://localhost:5173
BACKEND_URL=http://localhost:4000

# ============================================
# BASE DE DONNÉES POSTGRESQL
# ============================================

# Utilisateur PostgreSQL
POSTGRES_USER=osint_admin

# Mot de passe PostgreSQL
# PRODUCTION : Utilisez un mot de passe fort (min 16 caractères)
POSTGRES_PASSWORD=change_me_to_strong_password

# Nom de la base de données
POSTGRES_DB=osint_db

# Port PostgreSQL (par défaut : 5432, personnalisé : 55432 pour éviter les conflits)
POSTGRES_PORT=55432

# URL de connexion complète (construite automatiquement)
# Format : postgresql://USER:PASSWORD@HOST:PORT/DATABASE
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:${POSTGRES_PORT}/${POSTGRES_DB}

# ============================================
# SÉCURITÉ - SECRETS JWT
# ============================================

# Secret pour les tokens d'accès JWT (min 32 caractères)
# PRODUCTION : Générez avec : node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_ACCESS_SECRET=your-very-secure-jwt-access-secret-min-32-chars

# Secret pour les tokens de rafraîchissement JWT (min 32 caractères)
# PRODUCTION : Générez avec : node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_REFRESH_SECRET=your-very-secure-jwt-refresh-secret-min-32-chars

# Durée de validité des tokens
# Format : nombre + unité (s=secondes, m=minutes, h=heures, d=jours)
JWT_ACCESS_EXPIRES_IN=15m
JWT_REFRESH_EXPIRES_IN=7d

# Domaine des cookies (optionnel, pour la production)
# Exemple : .votre-domaine.com
COOKIE_DOMAIN=

# ============================================
# CHIFFREMENT DES DONNÉES SENSIBLES
# ============================================

# Clé maître pour le chiffrement AES-256-GCM (min 64 caractères hexadécimaux)
# Utilisée pour chiffrer les clés API IA et autres données sensibles
# PRODUCTION : Générez avec : node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
CRYPTO_MASTER_KEY=0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef

# Algorithme de chiffrement (par défaut : aes-256-gcm, ne pas modifier)
CRYPTO_ALGO=aes-256-gcm

# Nombre de rounds pour le hachage des mots de passe (bcrypt)
# Valeur recommandée : 12 (par défaut si non spécifié)
PASSWORD_SALT_ROUNDS=12

# ============================================
# MOTEUR DE RECHERCHE MEILISEARCH
# ============================================

# URL du serveur Meilisearch
MEILI_HOST=http://localhost:7700
MEILISEARCH_HOST=http://localhost:7700

# Clé maître Meilisearch (min 16 caractères)
# PRODUCTION : Générez avec : node -e "console.log(require('crypto').randomBytes(16).toString('hex'))"
MEILI_MASTER_KEY=masterKey123456789
MEILISEARCH_API_KEY=masterKey123456789

# Port Meilisearch
MEILI_PORT=7700

# Environnement Meilisearch (development ou production)
MEILI_ENV=development

# Désactiver la télémétrie (true pour désactiver)
MEILI_NO_ANALYTICS=true

# ============================================
# COMPTE ADMINISTRATEUR INITIAL
# ============================================

# Email de l'administrateur système
ADMIN_EMAIL=admin@osintreport.local

# Mot de passe de l'administrateur (min 12 caractères)
# PRODUCTION : Générez avec : node -e "console.log(require('crypto').randomBytes(12).toString('base64'))"
# ⚠️ CHANGEZ CE MOT DE PASSE APRÈS LA PREMIÈRE CONNEXION !
ADMIN_PASSWORD=AdminPassword123!

# Prénom et nom de l'administrateur
ADMIN_FIRST_NAME=Admin
ADMIN_LAST_NAME=Police

# ============================================
# INTÉGRATION IA (Optionnel)
# ============================================
# Les clés API sont stockées CHIFFRÉES dans la base de données
# Configurez-les via l'interface Admin → Paramètres IA
# 
# Fournisseurs supportés :
# - Google Gemini (gratuit avec quotas : 15 req/min, 1500/jour)
# - OpenAI (payant : GPT-4o, GPT-5)
# - Anthropic Claude (payant : Claude 3.5 Sonnet)
#
# Obtenir une clé API :
# - Gemini : https://makersuite.google.com/app/apikey
# - OpenAI : https://platform.openai.com/api-keys
# - Claude : https://console.anthropic.com/settings/keys
#
# Les clés sont automatiquement chiffrées avec CRYPTO_MASTER_KEY

# ============================================
# CONFIGURATION AVANCÉE (Optionnel)
# ============================================

# Taille maximale des fichiers uploadés (en bytes)
# Par défaut : 50MB
# MAX_FILE_SIZE=52428800

# Timeout pour les requêtes API externes (en ms)
# Par défaut : 30000 (30 secondes)
# API_TIMEOUT=30000

# Niveau de log (error, warn, info, debug, trace)
# Par défaut : info
# LOG_LEVEL=info

# ============================================
# DOCKER COMPOSE (si utilisé)
# ============================================
# Ces variables sont utilisées par docker-compose.yml

# Port exposé pour le frontend
# FRONTEND_PORT=5173

# Port exposé pour le backend
# BACKEND_PORT=4000

# ============================================
# NOTES IMPORTANTES
# ============================================
# 
# 1. SÉCURITÉ :
#    - Ne committez JAMAIS le fichier .env dans Git
#    - Générez des secrets forts en production
#    - Changez le mot de passe admin après la première connexion
#    - Sauvegardez vos secrets de manière sécurisée
#
# 2. GÉNÉRATION DE SECRETS :
#    - Utilisez le script : ./scripts/generate-secrets.sh
#    - Ou manuellement avec Node.js (voir exemples ci-dessus)
#
# 3. BASE DE DONNÉES :
#    - Après modification de DATABASE_URL, exécutez : npx prisma migrate dev
#    - Pour reset la BDD : npx prisma migrate reset (⚠️ efface toutes les données)
#
# 4. MEILISEARCH :
#    - Démarrez avec Docker : docker-compose up -d meilisearch
#    - Ou localement : meilisearch --master-key="$MEILI_MASTER_KEY"
#
# 5. SUPPORT :
#    - Documentation : /docs
#    - Démarrage rapide : /docs/QUICKSTART.md
