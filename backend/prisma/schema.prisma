generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  DEACTIVATED
}

enum ReportStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EntityType {
  PERSON
  ORGANIZATION
  TELEPHONE
  EMAIL
  ACCOUNT
  ADDRESS
  OTHER
}

model User {
  id           String     @id @default(uuid())
  firstName    String
  lastName     String
  matricule    String     @unique
  email        String     @unique
  phone        String?
  grade        String?
  passwordHash String
  avatarUrl    String?
  signatureUrl String?
  
  // Time preferences
  timezone         String?  @default("Europe/Brussels")
  dateFormat       String?  @default("24h")
  firstDayOfWeek   String?  @default("monday")
  
  roleId       String
  status       UserStatus @default(PENDING)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  role                Role                 @relation(fields: [roleId], references: [id])
  sessions            UserSession[]
  reports             Report[]             @relation("ReportOwner")
  reportVersions      ReportVersion[]      @relation("ReportVersionAuthor")
  auditLogs           AuditLog[]           @relation("AuditLogActor")
  passwordResetTokens PasswordResetToken[]
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          String           @id @default(uuid())
  code        String           @unique
  description String?
  roles       RolePermission[]
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model UserSession {
  id               String   @id @default(uuid())
  userId           String
  refreshTokenHash String
  userAgent        String?
  ipAddress        String?
  createdAt        DateTime @default(now())
  expiresAt        DateTime

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

model Report {
  id                String       @id @default(uuid())
  title             String
  caseNumber        String?
  reportNumber      String?
  purpose           String?
  summary           String?
  relatedCases      Json?
  requestingService String?
  reportingUnit     String?
  reportingOfficer  String?
  reportingRank     String?
  issuedAt          DateTime?    @default(now())
  objectives        Json?
  status            ReportStatus @default(DRAFT)
  ownerId           String
  dateRangeStart    DateTime?
  dateRangeEnd      DateTime?

  // Nouveaux champs pour rapports OSINT
  investigationContext String? // Contexte de l'enquête
  legalBasis           String? // Base légale de l'enquête
  urgencyLevel         String? // ROUTINE, URGENT, CRITICAL
  classification       String? // PUBLIC, RESTRICTED, CONFIDENTIAL, SECRET
  keywords             String[] // Mots-clés pour recherche

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner       User               @relation("ReportOwner", fields: [ownerId], references: [id])
  modules     ReportModule[]
  attachments ReportAttachment[]
  versions    ReportVersion[]
  vaultItems  VaultItem[]

  // Relations de corrélation
  correlations      ReportCorrelation[] @relation("SourceReport")
  correlatedBy      ReportCorrelation[] @relation("RelatedReport")
  searchableContent SearchableContent?

  @@index([caseNumber])
  @@index([reportNumber])
  @@index([status])
  @@index([ownerId])
  @@index([issuedAt])
}

model ReportVersion {
  id          String   @id @default(uuid())
  reportId    String
  version     Int
  snapshot    Json
  createdById String
  createdAt   DateTime @default(now())

  report Report @relation(fields: [reportId], references: [id])
  author User   @relation("ReportVersionAuthor", fields: [createdById], references: [id])

  @@unique([reportId, version])
}

model ReportModule {
  id        String   @id @default(uuid())
  reportId  String
  type      String
  slug      String?
  title     String?
  headline  String?
  entityId  String?
  position  Int      @default(0)
  payload   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  report        Report             @relation(fields: [reportId], references: [id])
  entity        Entity?            @relation(fields: [entityId], references: [id])
  researchItems ResearchRecord[]
  attachments   ReportAttachment[]

  @@index([reportId])
  @@index([entityId])
}

model ReportAttachment {
  id         String    @id @default(uuid())
  reportId   String
  moduleId   String?
  type       String    @default("image")
  storageKey String
  fileName   String
  mimeType   String
  fileSize   Int
  caption    String?
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?

  report Report        @relation(fields: [reportId], references: [id])
  module ReportModule? @relation(fields: [moduleId], references: [id])

  @@index([reportId])
  @@index([moduleId])
}

model Entity {
  id        String     @id @default(uuid())
  label     String
  type      EntityType
  notes     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  modules         ReportModule[]
  researchRecords ResearchRecord[]
}

model ResearchType {
  id        String   @id @default(uuid())
  code      String   @unique
  label     String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  researchRecords ResearchRecord[]
}

model ResearchRecord {
  id               String   @id @default(uuid())
  reportModuleId   String
  entityId         String?
  researchTypeId   String
  subtitle         String?
  details          Json?
  sensitiveDataRef String?  @unique
  createdAt        DateTime @default(now())

  module       ReportModule @relation(fields: [reportModuleId], references: [id])
  entity       Entity?      @relation(fields: [entityId], references: [id])
  researchType ResearchType @relation(fields: [researchTypeId], references: [id])
  vaultItem    VaultItem?   @relation("ResearchRecordVault", fields: [sensitiveDataRef], references: [id])

  @@index([reportModuleId])
  @@index([researchTypeId])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, etc.
  resource   String // users, reports, vaults, etc.
  resourceId String?
  details    Json? // Additional context about the action
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  user User? @relation("AuditLogActor", fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
}

// Table de corrélation entre rapports
model ReportCorrelation {
  id              String    @id @default(uuid())
  sourceReportId  String
  relatedReportId String
  correlationType String // PHONE, EMAIL, ADDRESS, NAME, ACCOUNT, ORGANIZATION
  correlationData Json // Données qui ont créé la corrélation
  confidence      Float // Score de confiance 0-1
  detectedAt      DateTime  @default(now())
  verifiedBy      String? // ID de l'utilisateur qui a vérifié
  verifiedAt      DateTime?
  notes           String? // Notes de l'enquêteur

  sourceReport  Report @relation("SourceReport", fields: [sourceReportId], references: [id], onDelete: Cascade)
  relatedReport Report @relation("RelatedReport", fields: [relatedReportId], references: [id], onDelete: Cascade)

  @@unique([sourceReportId, relatedReportId, correlationType])
  @@index([sourceReportId])
  @@index([relatedReportId])
  @@index([correlationType])
  @@index([confidence])
  @@index([detectedAt])
}

// Table pour indexation Meilisearch
model SearchableContent {
  id          String   @id @default(uuid())
  reportId    String   @unique
  contentHash String // Hash du contenu pour détecter les changements
  fullText    String   @db.Text // Texte complet indexable
  entities    Json // Entités extraites (téléphones, emails, adresses, noms)
  metadata    Json // Métadonnées (dates, lieux, organisations, etc.)
  indexedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([contentHash])
  @@index([updatedAt])
}

model KeyStore {
  id           String    @id @default(uuid())
  label        String    @unique
  encryptedKey String
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  rotatedAt    DateTime?

  vaultItems VaultItem[]
}

model VaultItem {
  id         String    @id @default(uuid())
  reportId   String
  keyId      String
  cipherText String
  field      String
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?

  report         Report          @relation(fields: [reportId], references: [id])
  key            KeyStore        @relation(fields: [keyId], references: [id])
  researchRecord ResearchRecord? @relation("ResearchRecordVault")

  @@index([reportId])
  @@index([keyId])
}

model SmtpConfig {
  id        String   @id @default(uuid())
  host      String
  port      Int
  secure    Boolean  @default(true)
  username  String
  password  String
  fromEmail String
  fromName  String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

model SystemSettings {
  id        String   @id @default(uuid())
  // Informations sur le service
  serviceName     String   @default("OSINT")
  serviceFullName String?  // Ex: "DR5 - OSINT - BRUXELLES"
  serviceAddress  String?
  serviceCity     String?
  servicePostalCode String?
  serviceCountry  String?  @default("Belgique")
  
  // Contacts
  phoneNumber     String?
  faxNumber       String?
  emailContact    String?
  websiteUrl      String?
  
  // Branding
  logoUrl         String?  // Chemin vers le logo uploadé
  primaryColor    String?  @default("#003f87") // Bleu police belge
  secondaryColor  String?  @default("#0066cc")
  
  // Clés API pour services IA (chiffrées)
  geminiApiKey    String?  // Google Gemini API Key (chiffrée)
  openaiApiKey    String?  // OpenAI API Key (chiffrée)
  claudeApiKey    String?  // Anthropic Claude API Key (chiffrée)
  aiProvider      String?  @default("gemini") // Provider par défaut: gemini, openai, claude
  aiModel         String?  @default("gemini-pro") // Modèle par défaut
  aiEnabled       Boolean  @default(false) // Activer/désactiver les fonctionnalités IA
  
  // Paramètres généraux d'administration
  maintenanceEnabled    Boolean   @default(false) // Mode maintenance activé
  maintenanceMessage    String?   // Message personnalisé de maintenance
  maintenanceScheduledAt DateTime? // Date/heure prévue de la maintenance
  lockUserCreation      Boolean   @default(false) // Verrouiller la création de comptes
  
  // Notifications
  criticalAlertsEnabled Boolean   @default(true) // Alertes critiques par email
  teamsWebhookUrl       String?   // URL du webhook Microsoft Teams
  teamsNotificationsEnabled Boolean @default(false) // Notifications Teams activées
  
  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
