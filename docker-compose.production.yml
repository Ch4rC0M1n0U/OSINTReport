# Docker Compose - Production
# Configuration optimisée pour le déploiement sur EasyPanel

version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: osintreport-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-osint_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-osint_db}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-osint_admin} -d ${POSTGRES_DB:-osint_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - osintreport-network

  # Moteur de recherche Meilisearch
  meilisearch:
    image: getmeili/meilisearch:v1.5
    container_name: osintreport-meilisearch
    restart: unless-stopped
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}
      MEILI_ENV: production
      MEILI_NO_ANALYTICS: "true"
    volumes:
      - meilisearch-data:/meili_data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7700/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - osintreport-network

  # API Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: osintreport-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgresql://${POSTGRES_USER:-osint_admin}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-osint_db}?schema=public
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      COOKIE_SECRET: ${COOKIE_SECRET}
      COOKIE_DOMAIN: ${COOKIE_DOMAIN:-}
      FRONTEND_URL: ${FRONTEND_URL}
      MEILI_HOST: http://meilisearch:7700
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_FIRST_NAME: ${ADMIN_FIRST_NAME:-Admin}
      ADMIN_LAST_NAME: ${ADMIN_LAST_NAME:-System}
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_SECURE: ${SMTP_SECURE:-false}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL:-}
      SMTP_FROM_NAME: ${SMTP_FROM_NAME:-OSINTReport}
    volumes:
      - backend-uploads:/app/uploads
      - backend-logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      meilisearch:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:4000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})\""]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - osintreport-network

  # Frontend Vue.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL}
    container_name: osintreport-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:8080"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - osintreport-network

  # Reverse Proxy Nginx (optionnel, pour gérer frontend + backend ensemble)
  nginx:
    image: nginx:alpine
    container_name: osintreport-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - osintreport-network
    profiles:
      - with-nginx

volumes:
  postgres-data:
    driver: local
  meilisearch-data:
    driver: local
  backend-uploads:
    driver: local
  backend-logs:
    driver: local

networks:
  osintreport-network:
    driver: bridge
