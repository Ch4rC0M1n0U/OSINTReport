#!/bin/bash

# Script de v√©rification rapide - Fix EXIF exifr
# Date: 6 octobre 2025

echo "üîç V√©rification du fix EXIF avec exifr"
echo "========================================"
echo ""

# 1. V√©rifier l'installation d'exifr
echo "1Ô∏è‚É£ V√©rification de l'installation d'exifr..."
cd /workspaces/OSINTReport/backend
if npm list exifr | grep -q "exifr@"; then
    echo "   ‚úÖ exifr install√© : $(npm list exifr | grep exifr@)"
else
    echo "   ‚ùå exifr NON install√©"
    echo "   ‚Üí Ex√©cuter: npm install exifr"
    exit 1
fi
echo ""

# 2. V√©rifier que exif-parser n'est plus l√†
echo "2Ô∏è‚É£ V√©rification de la suppression d'exif-parser..."
if npm list exif-parser 2>&1 | grep -q "empty"; then
    echo "   ‚úÖ exif-parser bien supprim√©"
else
    echo "   ‚ö†Ô∏è  exif-parser encore pr√©sent"
    echo "   ‚Üí Ex√©cuter: npm uninstall exif-parser"
fi
echo ""

# 3. V√©rifier les erreurs TypeScript
echo "3Ô∏è‚É£ V√©rification des erreurs TypeScript..."
if npx tsc --noEmit --skipLibCheck 2>&1 | grep -q "error TS"; then
    echo "   ‚ùå Erreurs TypeScript d√©tect√©es"
    npx tsc --noEmit --skipLibCheck | head -20
else
    echo "   ‚úÖ Aucune erreur TypeScript"
fi
echo ""

# 4. V√©rifier le code source
echo "4Ô∏è‚É£ V√©rification du code source..."
if grep -q "import exifr from 'exifr'" src/modules/media/media.service.ts; then
    echo "   ‚úÖ Import exifr pr√©sent"
else
    echo "   ‚ùå Import exifr MANQUANT"
fi

if grep -q "exifr.parse" src/modules/media/media.service.ts; then
    echo "   ‚úÖ Appel exifr.parse() pr√©sent"
else
    echo "   ‚ùå Appel exifr.parse() MANQUANT"
fi

if grep -q "limitInputPixels: 100000000" src/modules/media/media.service.ts; then
    echo "   ‚úÖ Limite Sharp augment√©e (100MP)"
else
    echo "   ‚ö†Ô∏è  Limite Sharp non augment√©e"
fi
echo ""

# 5. V√©rifier les services Docker
echo "5Ô∏è‚É£ V√©rification des services Docker..."
cd /workspaces/OSINTReport
if docker-compose ps | grep -q "postgres.*Up"; then
    echo "   ‚úÖ PostgreSQL en cours d'ex√©cution"
else
    echo "   ‚ö†Ô∏è  PostgreSQL arr√™t√©"
    echo "   ‚Üí Ex√©cuter: docker-compose up -d"
fi

if docker-compose ps | grep -q "meilisearch"; then
    echo "   ‚úÖ Meilisearch en cours d'ex√©cution"
else
    echo "   ‚ö†Ô∏è  Meilisearch arr√™t√©"
fi
echo ""

# 6. V√©rifier le backend
echo "6Ô∏è‚É£ V√©rification du backend..."
if curl -s http://localhost:4000/api/health > /dev/null 2>&1; then
    HEALTH=$(curl -s http://localhost:4000/api/health)
    if echo "$HEALTH" | grep -q "ok"; then
        echo "   ‚úÖ Backend op√©rationnel"
    else
        echo "   ‚ö†Ô∏è  Backend r√©pond mais √©tat inconnu: $HEALTH"
    fi
else
    echo "   ‚ùå Backend inaccessible (http://localhost:4000)"
    echo "   ‚Üí Ex√©cuter: cd backend && npm run dev"
fi
echo ""

# 7. V√©rifier le dossier uploads
echo "7Ô∏è‚É£ V√©rification du dossier uploads..."
UPLOAD_DIR="/workspaces/OSINTReport/backend/uploads/screenshots"
if [ -d "$UPLOAD_DIR" ]; then
    echo "   ‚úÖ Dossier uploads/screenshots existe"
    COUNT=$(ls -1 "$UPLOAD_DIR"/*.webp 2>/dev/null | wc -l)
    echo "   üìä Nombre d'images: $COUNT"
    
    # V√©rifier si certaines ont du GPS
    GPS_COUNT=0
    for meta in "$UPLOAD_DIR"/*.meta.json 2>/dev/null; do
        if [ -f "$meta" ] && grep -q "gpsLatitude" "$meta"; then
            ((GPS_COUNT++))
        fi
    done
    echo "   üìç Images avec GPS: $GPS_COUNT"
else
    echo "   ‚ö†Ô∏è  Dossier uploads/screenshots n'existe pas"
fi
echo ""

# R√©sum√© final
echo "========================================"
echo "üìä R√âSUM√â"
echo "========================================"
echo ""

# Compteur de checks
CHECKS_OK=0
CHECKS_TOTAL=7

if npm list exifr | grep -q "exifr@"; then ((CHECKS_OK++)); fi
if ! npm list exif-parser 2>&1 | grep -q "exif-parser@"; then ((CHECKS_OK++)); fi
if ! npx tsc --noEmit --skipLibCheck 2>&1 | grep -q "error TS"; then ((CHECKS_OK++)); fi
if grep -q "import exifr from 'exifr'" backend/src/modules/media/media.service.ts; then ((CHECKS_OK++)); fi
if docker-compose ps | grep -q "postgres.*Up"; then ((CHECKS_OK++)); fi
if curl -s http://localhost:4000/api/health 2>&1 | grep -q "ok"; then ((CHECKS_OK++)); fi
if [ -d "$UPLOAD_DIR" ]; then ((CHECKS_OK++)); fi

echo "Checks r√©ussis: $CHECKS_OK / $CHECKS_TOTAL"
echo ""

if [ $CHECKS_OK -eq $CHECKS_TOTAL ]; then
    echo "‚úÖ TOUT EST PR√äT POUR LES TESTS !"
    echo ""
    echo "Prochaine √©tape:"
    echo "1. Uploader une image Xiaomi/Google Photos avec GPS"
    echo "2. V√©rifier les logs backend pour voir l'extraction GPS"
    echo "3. Confirmer l'affichage du badge üìç et de la carte"
    echo ""
    echo "Voir: docs/TEST-UPLOAD-XIAOMI.md"
elif [ $CHECKS_OK -ge 5 ]; then
    echo "‚ö†Ô∏è  PRESQUE PR√äT (quelques warnings √† corriger)"
else
    echo "‚ùå CORRECTIONS N√âCESSAIRES"
    echo ""
    echo "Actions requises:"
    echo "1. Installer exifr: cd backend && npm install exifr"
    echo "2. D√©marrer services: docker-compose up -d"
    echo "3. D√©marrer backend: cd backend && npm run dev"
fi

echo ""
echo "========================================"
